#césar:Lundi 4 novembre 2024
#Arriére plan
from p5 import *

def setup():
    size(800, 600) 
    background(0)   # Fond noir

def draw():
    background(0)  
    draw_rectangles()

def draw_rectangles():
  
    stroke(255) 
    stroke_weight(4) 

    
    fill(0, 0, 255)  # Couleur bleue

    # Rectangle supérieur
    rect(0, 50, width, 100)  
    # Rectangle inférieur
    rect(0, height - 150, width, 100)  

run()






#Milo:4 novembre: animation pacman (ouverture de bouche et déplacement)

from p5 import*#on importe la bibliothèque p5 pour dessiner

pacmanX=60#position de pacman en abcisse 
vitesse=4#vitesse de déplacement
bouche=True#bouche ouverte 
compteurAnimation=0#compteur de temps pour l'animation de la bouche

def setup():
    size(800, 600)#écran de 800*600

def draw():
    global pacmanX,bouche,compteurAnimation#on utilise la variable du début et pas une variable locale
    
    background(0)#noir
    fill(255, 255, 0)#jaune

    ellipse(pacmanX, 300, 120, 120)#création du corps

    if(bouche==True):#si la bouche est ouverte
        fill(0)#noir
        triangle(pacmanX,300,pacmanX+60,270,pacmanX+60,330)#création de la bouche

    compteurAnimation+=1#rajoute 1 au compteur
    if(compteurAnimation>=10):#si le compteur atteint 1O
        bouche=not bouche#on inverse le bool
        compteurAnimation=0#le compteur repart à 0

    pacmanX+=vitesse#déplacement de pacman
    if(pacmanX>width+60):#si pacman dépasse l'écran
        pacmanX=-60#revient avant l'écran

run()

Mathéo: Fantôme animé

from p5 import *

# Dimensions de l'écran (fond agrandi)
screen_width = 1200
screen_height = 900

# Couleurs des fantômes (rouge, rose, cyan, orange)
ghost_colors = [(255, 0, 0), (255, 184, 222), (0, 255, 255), (255, 184, 82)]

# Positions initiales et vitesse des fantômes
ghost_positions = [(-150 * i, screen_height // 2) for i in range(4)]
ghost_speed = 9  # Vitesse de déplacement des fantômes (ajustée pour l'écran plus grand)

def setup():
    size(screen_width, screen_height)
    no_stroke()

def draw():
    background(0)  # Fond noir

    for i, (x, y) in enumerate(ghost_positions):
        # Définir la couleur du fantôme
        fill(*ghost_colors[i])

        # Dessiner le corps du fantôme (agrandi)
        ellipse((x, y), 90, 90)  # Tête arrondie (agrandie)
        rect((x - 45, y), 90, 45)  # Corps rectangulaire (agrandi)

        # Dessiner les grands yeux ovales (agrandis en hauteur)
        fill(255)
        ellipse((x - 22, y - 5), 20, 45)  # Oeil gauche (hauteur augmentée de 1,5x)
        ellipse((x + 22, y - 5), 20, 45)  # Oeil droit (hauteur augmentée de 1,5x)

        # Pupilles
        fill(0)
        ellipse((x - 22, y - 5), 9, 22.5)  # Pupille gauche (ajustée pour les yeux plus grands)
        ellipse((x + 22, y - 5), 9, 22.5)  # Pupille droite (ajustée pour les yeux plus grands)

        # Ajouter les pattes arrondies en bas du fantôme avec effet de cascade (pris sur @)
        fill(*ghost_colors[i])
        for j, offset_x in enumerate(range(-30, 40, 30)):  # Index `j` pour chaque patte
            offset_y = 7 * sin((x / 20) + j)  # Décalage en cascade avec `j`
            ellipse((x + offset_x, y + 45 + offset_y), 30, 30)  # Patte avec décalage individuel

        # Mettre à jour la position du fantôme
        ghost_positions[i] = ((x + ghost_speed) % screen_width, y)

run()


from p5 import * # on importe la bibliothèque p5 pour dessiner

pacmanX = 740 # position initiale de pacman en abscisse (commence à droite)
vitesse = -4 # vitesse de déplacement (vers la gauche)
bouche = True # bouche ouverte
compteurAnimation = 0 # compteur de temps pour l'animation de la bouche
width = 600

def setup():
    size(800, 600) # écran de 800x600

def draw():
    global width, pacmanX, bouche, compteurAnimation # on utilise la variable du début et pas une variable locale
    
    background(0) # noir
    fill(200, 0, 0) # rouge 

    ellipse(pacmanX, 300, 180, 180) # corps agrandi (largeur et hauteur augmentées)

    if bouche: # si la bouche est ouverte
        fill(0) # noir
        triangle(pacmanX, 300, pacmanX - 90, 240, pacmanX - 90, 360) # bouche agrandie pour correspondre au corps

    compteurAnimation += 1 # rajoute 1 au compteur
    if compteurAnimation >= 10: # si le compteur atteint 10
        bouche = not bouche # on inverse le bool
        compteurAnimation = 0 # le compteur repart à 0

    pacmanX += vitesse # déplacement de pacman
    if pacmanX < -90: # si pacman dépasse l'écran à gauche (taille ajustée)
        pacmanX = width + 90 # revient à droite de l'écran


    fill(255,255,255)#blanc
    noStroke()#pas de contour
    ellipse(pacmanX-23,260,25,25)#blanc de l'oeil
    fill(200,0,0)#rouge
    ellipse(pacmanX-23,260,10,10)#iris de l'oeil

run()


#milo:pac man mange le bonus (18/11/24)(rajout d'un oeil)

from p5 import*#on importe la bibliothèque p5 pour dessiner

pacmanX=60#position de Pacman en abscisse
vitesse=4#vitesse de déplacement
bouche=True#bouche ouverte
compteurAnimation=0#compteur de temps pour l'animation de la bouche



bouleX=400#position x de la boule
bouleY=300#position y de la boule
boule=True#état de la boule(visible ou pas)

def setup():
    size(800, 600)#écran de 800x600

def draw():
    global pacmanX, bouche, compteurAnimation, boule,bouleX#on utilise les variables du début et pas une variable locale

    background(0)#noir
    fill(255, 255, 0)#jaune
    ellipse(pacmanX, 300, 120, 120)#création du corps
    fill(255,255,255)#blanc
    noStroke()#pas de contour
    ellipse(pacmanX+23,270,25,25)#blanc de l'oeil
    fill(0,0,125)#bleu
    ellipse(pacmanX+23,270,10,10)#iris de l'oeil


    if bouche:#si la bouche est ouverte
        fill(0)#noir
        triangle(pacmanX, 300, pacmanX + 60, 270, pacmanX + 60, 330)#création de la bouche

    compteurAnimation+=1#rajoute 1 au compteur
    if compteurAnimation>=10:#si le compteur atteint 10
        bouche=not bouche#on inverse le bool
        compteurAnimation=0#le compteur repart à 0


    pacmanX += vitesse#déplacement de Pacman
    if (pacmanX > width + 60):#si Pacman dépasse l'écran
        pacmanX = -60#revient avant l'écran

    ecartBoulePac = bouleX-pacmanX#calcul de l'écart entre la boule et pac man
    
 
    if (boule==True and ecartBoulePac < 60):#si les deux objets sont trop proches
        boule=False#la boule est considérée comme disparue
        bouleX=width-100#on envoie la boule avant l'écran
    
    
    
    if (boule==True):
        fill(255, 0, 0)#rouge
        ellipse(bouleX, bouleY, 40, 40)#dessiner la boule

run()

matteo 25/11
from p5 import *
# Dimensions de l'écran
screen_width = 1200
screen_height = 900

def draw():
    background(0)  # Fond noir
    fill(255,0,0)
    strokeWeight(1)
    stroke(0)
    ellipse(200, 200, 90, 90)  # 1er cerise
    ellipse(280, 200, 90, 90)  # 2eme cerise
    strokeWeight(8)
    stroke(0,255,0)
    line(200, 155, 250, 70) # tige de gauche
    line(280, 155, 250, 70) # tige de droite
    stroke(139, 0, 0)
    ellipse(200, 155, 10, 5) # liaison tige/cerise gauche
    ellipse(280, 155, 10, 5) # liaison tige/cerise droite
    fill(0, 255, 0)
    stroke(0, 255, 0)
    ellipse(275, 70, 70, 45) # feuille
    strokeWeight(5)
    stroke(0, 100, 0)
    stroke(255)
    fill(255)
    ellipse(220, 200, 15, 15) # reflet blanc (gauche)
    ellipse(300, 200, 15, 15) # reflet blanc (droite)

run()
